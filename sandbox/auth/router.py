from typing import Annotated

from fastapi import APIRouter, Depends, HTTPException, status
from fastapi.security import OAuth2PasswordRequestForm
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select # Import select explicitly
from sqlalchemy.exc import IntegrityError

from app.core.db import get_db
from app.auth import schemas, security, models
from app.api.deps import get_current_active_user

router = APIRouter(
    prefix="/auth", # Prefix for all routes in this router
    tags=["auth"]    # Tag for OpenAPI documentation
)

@router.post("/token", response_model=schemas.Token)
async def login_for_access_token(
    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],
    db: Annotated[AsyncSession, Depends(get_db)]
):
    """
    OAuth2 compatible token login, get an access token for future requests.
    Username is the user's email.
    """
    # Fetch user by email (username)
    query = select(models.User).where(models.User.email == form_data.username)
    result = await db.execute(query)
    user = result.scalar_one_or_none()

    # Validate user and password
    if not user or not security.verify_password(form_data.password, user.hashed_password):
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Incorrect email or password",
            headers={"WWW-Authenticate": "Bearer"},
        )

    if not user.is_active:
         raise HTTPException(status_code=400, detail="Inactive user")

    # Create access token
    access_token = security.create_access_token(
        data={"sub": user.email} # 'sub' is standard claim for subject (user identifier)
    )
    return {"access_token": access_token, "token_type": "bearer"}


@router.post("/register", response_model=schemas.User, status_code=status.HTTP_201_CREATED)
async def register_user(
    user_in: schemas.UserCreate,
    db: Annotated[AsyncSession, Depends(get_db)]
):
    """
    Register a new user.
    """
    # Check if user already exists
    query = select(models.User).where(models.User.email == user_in.email)
    result = await db.execute(query)
    existing_user = result.scalar_one_or_none()
    if existing_user:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="Email already registered",
        )

    # Hash password and create user object
    hashed_password = security.get_password_hash(user_in.password)
    db_user = models.User(
        email=user_in.email,
        hashed_password=hashed_password,
        is_active=True # Activate user upon registration by default
    )

    # Add user to session and commit
    db.add(db_user)
    try:
        await db.commit()
        await db.refresh(db_user) # Refresh to get the ID generated by the DB
    except IntegrityError: # Catch potential race conditions
        await db.rollback()
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="Email already registered (race condition)",
        )
    except Exception: # Catch other potential DB errors
        await db.rollback()
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Could not register user",
        )

    return db_user


@router.get("/users/me", response_model=schemas.User)
async def read_users_me(
    current_user: Annotated[models.User, Depends(get_current_active_user)]
):
    """
    Get current authenticated user's details.
    """
    # The dependency get_current_active_user already fetches and validates the user
    return current_user
